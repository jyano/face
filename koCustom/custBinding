	/*
	 <unrealistic-cm
	 params='stringValue: "hello",
	 numericValue: 123,
	 boolValue: true,
	 objectValue: { a: 1, b: 2 },
	 dateValue: new Date(),
	 someModelProperty: myModelValue,
	 observableSubproperty: someObservable().subprop'>
	 </unrealistic-component>*/
	/*
	 ko.bindingHandlers.yourBindingName = {
	 init: function(element, valueAccessor, allBindings, viewModel, bindingContext) {
	 // This will be called when the binding is first applied to an element
	 // Set up any initial state, event handlers, etc. here
	 },
	 update: function(q, vAc, bd, vm, bdCtx) {
	 // This will be called once when the binding is first applied to an element,
	 // and again whenever any observables/computeds that are accessed change
	 // Update the DOM element based on the supplied values here.
	 }
	 }
	 */
	/*
	 The “update” callback
	 ko will call the upd cb init when   bd   applied to an el
	 and tr any deps (observs/computeds) that you access.
	 When any deps change, the upd  cb   called  w these pams:
	 el  —  DOM el  involved in this bd
	
	 valAcc — fn that you can call to get the cur md pop involved in this bd (cur md pop v = valAcc())
	
	 To easily accept both observable and plain values, call ko.unwrap on the returned value.
	
	 allBindings — ob,  used to access all the md values bound to this el
	
	 Call allBindings.get('name') to retrieve the value of the name binding (returns undefined if the binding doesn’t exist);
	 or allBindings.has('name') to determine if the name binding is present for the current element.
	
	 vm —   deprecated  !
	
	 Use bindingContext.$data or bindingContext.$rawData to access the view model instead.
	
	 bindingCtx — ob, holds the binding ctx available to this el’s bindings,
	 includes special properties including $parent, $parents,
	 and $root that can be used to access data that is bound against ancestors of this ctx
	
	 ex: you might have been controlling an element’s vs using the vs binding,
	 but now you want to go a step further and animate the transition.
	 You want elements to slide into and out of existence according to the value of an observable.
	 You can do this by writing a cust  binding that calls jq’s slideUp/slideDown functions:
	
	 */
	/*
	
	 You should use ko.utils.unwrapObservable
	 in cases where you don't know if u have been gvn an obsvb or not.
	 This would commonly be in a cstm bdg where an ovb or
	 non-obv
	 could be bound against it.
	
	 In the code that u have above,
	 the call to vAc() is not actually unwrpping an ovb
	
	 It is just retrieving the value that was passed to the binding in the correct context
	
	 (it gets wrapped in a fn to protect it).
	
	 The ret v of valAcc() may be an obv or not.
	
	 It is * was pasd to the bdg
	
	
	 */